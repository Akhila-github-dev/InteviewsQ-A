Idempotency 
Ensure operations are idempotent, meaning repated execution has the same effect. this helps avoid duplication and inconsistency during retries.

an idempotent api guarantees that repated calls with the same parameters will not change the result beyon the initail application.

Get:always idempotent(fetches data).
put: should be idempotent(updates a resource)
delete: hould be idempotent (removes a resource)
post : not idemptent by default, but can be made idempotent using techniques like idempotency keys.
==========================================================================================
https://chatgpt.com/share/6871f6a2-44a4-8007-a944-c588f27e2677
How can we handle large data in SpringBoot application 
1. Pagination and Sorting
Instead of loading all records, fetch them in smaller chunks.Reduces memory usage and improves response time
2. Streaming Large Data
Use Java 8 Streams or JPA streaming to process large datasets without loading all at once.
@Query("SELECT e FROM Employee e")
Stream<Employee> streamAllEmployees();

try (Stream<Employee> stream = employeeRepository.streamAllEmployees()) {
    stream.forEach(emp -> process(emp));
}
3. Batch Processing
Use Spring Batch to process and write large volumes of data in chunks.
 4. Asynchronous Processing
If processing large data takes time, run it in the background.
6. Caching
Use Spring Cache or Redis to reduce repetitive database calls.

@Cacheable("employees")
public List<Employee> getAllEmployees() {
    return employeeRepository.findAll();
7. Use DTOs Instead of Entities
Only fetch required fields using DTO projections.

| Strategy        | Use Case                                |
| --------------- | --------------------------------------- |
| Pagination      | Displaying/searching large tables       |
| Streaming       | Reading millions of records efficiently |
| Spring Batch    | ETL jobs, scheduled data loads          |
| Asynchronous    | Background processing                   |
| DTO Projections | Optimized data fetching                 |
| Redis Caching   | Fast access to frequently used data     |
| Message Queues  | Distribute load                         |
| File Streaming  | Upload/download large files             |


Pagination is the process of dividing a large set of data into smaller chunks (pages).
âœ… Example: If you have 10,000 records, you can show 100 records per page â€” making it 100 pages.

ðŸ”¹ What is Sorting?
Sorting is the process of arranging the data based on one or more fields.
âœ… Example: Sort employees by name in ascending or descending order.

ðŸ”¹ Spring Data JPA Support
Spring provides Pageable, Page, and Sort interfaces to handle pagination and sorting.

@Entity
public class Employee {
    @Id
    private Long id;
    private String name;
    private int age;
}

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
}
Since JpaRepository already extends PagingAndSortingRepository, it provides:

Page<Employee> findAll(Pageable pageable);
ðŸ”¹ 2. Pagination + Sorting Controller 

@GetMapping("/employees")
public Page<Employee> getEmployees( @RequestParam(defaultValue = "0") int page,  @RequestParam(defaultValue = "5") int size,  @RequestParam(defaultValue = "id") String sortBy) {
    Pageable pageable = PageRequest.of(page, size, Sort.by(sortBy));
    return employeeRepository.findAll(pageable);
}
âœ… Explanation:
page=0: First page (0-based index)

size=5: 5 records per page

sortBy=id: Sort records by id column
GET /employees?page=1&size=5&sortBy=name
This fetches the second page with 5 employees sorted by name.

