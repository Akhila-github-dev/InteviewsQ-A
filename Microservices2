API GATEWAY:-
In microservices, each service has its own endpoint. But if every client (mobile, web, etc.) calls each service directly, 
it creates tight coupling and complexity on the client side.
An API Gateway solves this by acting as a single entry point. It routes requests to the right service, aggregates responses if needed, 
and manages cross-cutting concerns like security, rate limiting, and load balancing.
An API Gateway is a single entry point for all client requests to a microservices system.
It acts as a reverse proxy, routing requests to the correct microservice, handling cross-cutting concerns like:
Authentication & Authorization (JWT/OAuth2)
Rate Limiting
Load Balancing
Caching
Logging & Monitoring
Request/Response Transformation
üìå Instead of clients calling multiple microservices directly, they talk only to the API Gateway, which then routes to the
appropriate backend services.

‚úÖ Q2: What are the responsibilities of an API Gateway?
Responsibility	Example
Routing	/api/users/** ‚Üí User Service
Authentication/Authorization	Validate JWT token before forwarding
Rate Limiting/Throttling	Limit to 100 requests/minute per user
Load Balancing	Distribute requests across instances
Caching	Cache frequent GET calls (e.g., catalog)
Aggregation	Combine data from multiple services
Logging/Monitoring	Track request/response times

‚úÖ Q3: How does API Gateway work with microservices?
The client sends all requests to the API Gateway. The gateway uses routing rules to forward requests to the appropriate microservice.
For example:
/users/** routes to User Service
/orders/** routes to Order Service
/payments/** routes to Payment Service
It also handles JWT token validation and blocks unauthorized requests before they reach the microservices.

‚úÖ Q4: Which API Gateway have you used in your project?
If using Spring Cloud Gateway:
We used Spring Cloud Gateway because it supports reactive programming, works well with Spring Boot microservices, and supports
dynamic routing and filters out of the box.

‚úÖ Q5: How does API Gateway handle authentication?

API Gateway validates JWT tokens for each incoming request. If the token is valid, it forwards the request to the microservice;
otherwise, it returns a 401 Unauthorized response.

This means individual services don‚Äôt need to handle authentication logic.

‚úÖ Q6: What are the pros and cons of using API Gateway?
üëç Advantages	üëé Disadvantages
Centralized security	Single point of failure
Simplifies client logic	Adds slight latency
Supports cross-cutting concerns	Can become a bottleneck
Load balancing and caching	Needs careful scaling

‚úÖ Q7: What happens if API Gateway fails?
It can become a single point of failure. To avoid this, we deploy multiple instances of API Gateway behind a load balancer
(e.g., AWS ALB or NGINX).

If API Gateway fails, all client requests to microservices fail because it is the single entry point. To prevent this,
we deploy multiple API Gateway instances behind a load balancer (like NGINX or AWS ALB).
We also enable horizontal scaling with Kubernetes, so that if a pod fails, a new one is automatically provisioned.
Health checks on the API Gateway ensure unhealthy instances are removed from the load balancer pool.
In production, we can use cloud-managed API Gateways like AWS API Gateway to get built-in high availability and fault tolerance.

We also considered API Gateway caching for GET requests, so even if a downstream service or Gateway instance is down briefly, frequently 
accessed data can still be served.‚Äù
‚úÖ And mention API Gateway resiliency patterns like:
Rate Limiting (to prevent overload)
Retries & Backoff
Timeouts

