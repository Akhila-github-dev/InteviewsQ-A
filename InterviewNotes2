https://copilot.microsoft.com/shares/sqqKcWwTmMS8VXKbcusET
*What is lazy loading and How Spring Handles it
A: Lazy loading is a technique where an object or bean is initialized only when it is needed, rather than at 
application startup. This helps improve performance by reducing unnecessary resource consumption.
How Spring Handles Lazy Loading
Spring provides the @Lazy annotation to control bean initialization. By default, Spring initializes all singleton beans eagerly at startup, but using @Lazy, we can delay this until the bean is actually required.


*What is Caching?
Caching is a technique used to store frequently accessed data in a temporary storage location for faster retrieval. 
Instead of fetching data from a slow source (like a database or API), caching allows systems to reuse previously 
retrieved or computed data, improving performance and reducing load times.

How Caching Works
Cache Hit – If requested data is found in the cache, it is returned instantly.
Cache Miss – If data is not in the cache, it is fetched from the original source and stored in the cache for future use.
Eviction Policy – When the cache reaches its storage limit, older or less frequently used data is removed based on policies like LRU (Least Recently Used) or LFU (Least Frequently Used). 


*asynchronous ans synchronous and resttemplate feign client
A:
Feature	           Synchronous	                                       Asynchronous
Execution   	Waits for completion before proceeding	               Executes without waiting
Blocking	    Blocking execution	                                   Non-blocking execution
Use Case	    Simple tasks, sequential operations	                  Web API calls, I/O operations, long-running tasks
Example	    Traditional method calls (RestTemplate)	               Multithreading, CompletableFuture, WebClient



Feature	                    RestTemplate	                                         Feign Client
Type                        	Standard HTTP client	                            Declarative HTTP client
Implementation	              Manual request handling                        	Auto-generates HTTP clients
Annotations                 	No built-in annotations	                        Uses @FeignClient
Asynchronous Support        	Requires manual threading	                     Supports async calls with CompletableFuture
Best For	                  Custom requests, fine-tuned control           	Simplified API calls, microservices


5.Difference between @Controller and @RestController
A: @Controller (Traditional MVC Controller)
Used in Spring MVC to handle web requests and return view templates (e.g., HTML, JSP).
Typically used for server-side rendering of web applications.
Requires @ResponseBody to return JSON or other data instead of a view.

@RestController (REST API Controller)
A combination of @Controller + @ResponseBody, simplifying REST API development.
Directly returns JSON, XML, or other data instead of views.
Best for creating RESTful web services.


6.What is Agile Methodologies.

*how can we create custom annotation
A:You define an annotation using @interface in Java.

java
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

// Defining a Custom Annotation
@Retention(RetentionPolicy.RUNTIME) // Available at runtime
@Target(ElementType.METHOD) // Can be applied to methods
public @interface MyAnnotation {
    String value(); // Annotation attribute
}
✅ @Retention(RetentionPolicy.RUNTIME) → Makes the annotation available at runtime. 
✅ @Target(ElementType.METHOD) → Restricts usage to methods.
Creating a custom annotation in Java involves defining an annotation with @interface, 
setting retention policies, and using it in your Spring Boot application. Here’s a step-by-step guide:
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target({ElementType.METHOD, ElementType.TYPE}) // Specifies applicable elements
@Retention(RetentionPolicy.RUNTIME) // Specifies visibility at runtime
public @interface CustomAnnotation {
    String value() default "";
    int level() default 1;
}
@Target defines where the annotation can be used (methods, classes, fields, etc.).

@Retention defines whether the annotation is available at runtime (RUNTIME) or only at compile time (CLASS or SOURCE).

Inside the annotation, you can define attributes like value and level
@CustomAnnotation(value = "Test", level = 5)
public class TestClass {
    @CustomAnnotation(value = "Method-Level")
 public void annotatedMethod() {
        System.out.println("This method is annotated!");
}}
Process Annotation Using Reflection
A: 
public class AnnotationProcessor {
    public static void main(String[] args) throws Exception {
        Class<TestClass> obj = TestClass.class;

        // Process class-level annotation
        if (obj.isAnnotationPresent(CustomAnnotation.class)) {
            CustomAnnotation annotation = obj.getAnnotation(CustomAnnotation.class);
            System.out.println("Class Annotation: " + annotation.value() + ", Level: " + annotation.level());
        }
// Process method-level annotation
        for (Method method : obj.getDeclaredMethods()) {
            if (method.isAnnotationPresent(CustomAnnotation.class)) {
                CustomAnnotation annotation = method.getAnnotation(CustomAnnotation.class);
                System.out.println("Method Annotation: " + annotation.value());
            }
        }
    }
}


================================================

how can we check wethere it is not custom exception class are not with one annotation
using @ExceptionHandler and instance of 
========================================================
 can we implement custom scope and how
types of bean scopes
1.Singleton (@Scope("singleton")) (Default Scope)
Only one instance of the bean is created and shared across the application.
Used when a single object needs to be shared globally.
Every time this bean is injected, the same instance is used.
2. Prototype (@Scope("prototype"))
New instance is created every time the bean is requested.
Used when objects have different states and shouldn’t be shared.
Each time this bean is requested, a new instance is provided.

3. Request (@Scope("request")) (For Web Applications)
A new bean instance is created per HTTP request.
Used in Spring MVC controllers.
Session (@Scope("session")) (For Web Applications)
A new bean instance is created per user session.
Useful for maintaining session-level data.
5. Application (@Scope("application")) (For Web Applications)
A single bean instance is created for the entire application lifecycle.
It is like singleton but specific to web applications.
6. WebSocket (@Scope("websocket")) (For WebSocket Communication)
A single bean instance is created for each WebSocket session.
Used in real-time messaging applications.
========================================================
service registry and service discovery 
Saga design pattern:-
Manages the transaction flow, ensuring each step executes in sequence and handling rollbacks when necessary.
11. Idempotency in ms.
12. Super class of all java class.

13. Oops concept.
14. How will prove that any class follows polymorphism, inheritence:-
A: Object class
15. In which u will use linkedList and arrayList.
16. D/f b/w hashmap and concurrent hashmap.
17. Remove duplicates and maintain the insertion order from duplicate array.
18. Volatile keyword.
19. Trasisient keyword.
20. D/F b/w stringBuilder and string buffer
21. == vs equals.
22. Indexes in SQL and how will u create one and how it works.
7.When you run a spring boot application, what is initialization process, and what steps will be executed in background
When a Spring Boot application starts, several key steps happen in the background. First, the JVM starts the 
execution. Then, Spring Boot initializes the SpringApplication class, which sets up the environment and loads
configurations. Next, the ApplicationContext is created, and Spring scans for beans, injecting dependencies 
accordingly. Any lifecycle callbacks, such as methods annotated with @PostConstruct, get executed. If it's a
web application, the embedded Tomcat or other server starts, allowing the application to listen for requests. Finally, event listeners and command-line runners execute before the application is fully ready to serv
 
8.How you implemented the functionality of cache, About @CachePut Related to my project.
 
9.How You expose endpoints using @RestController
 
10.How to configure to XML Data for rest controller related to Consumes and Produces concepts in Microservices.
 
11.How do we handle tokens, What is the rule or structure of JWT Token  (Spring Security ) 
12.What is use of HTTP Filters
13.What is interceptors SPRING MVC and How interceptors used in Spring MVC
 
14.I have to make a query which cannot be executed by default JPA Repository methods like findById and
findByAll etc,I need to find all employees whose name starts with "A" and whose department is IT AND 
Location is pune ,How can we achieve data retrieval without using default methods
15. How Database Objects are mapped to Java Objects.
16.Example::: When we create a new record, Its incremented by one, right,i want to increment by 10 0r 100,
So the next employee id that needs to  be added to table should be 110,How you can implement the logic in 
spring data JPA.
17.Table has composite key how you can map that to java Object in Spring DATA JPA
18.What is indexes and types of indexes SQL

19.lets say if i have to execute any stored procedure using Spring data JPA, What all code changes required 
and how you will store the results of the stored procedure
20. Write a program  to convert list into Map using Java8
21.What is the Purpose of the @SpringBootApplication  annotation
22.What is priority queue
23.What is Array List and LinkedList.
24.why we use interceptors when we already have jwt?
Great question! Even though JWT (JSON Web Token) provides authentication and authorization, interceptors are still useful for additional functionalities beyond token validation. Here’s why we use interceptors along with JWT:

1. Pre-Processing Requests (Logging & Modification)
Interceptors allow you to modify requests before they reach the controller.

Example: Logging incoming requests, sanitizing headers, or adding custom metadata.

2. Role-Based Access Control (Authorization)
JWT only verifies identity, but it doesn’t define access levels.

Interceptors help enforce role-based access control (e.g., Admin vs. User permissions).

3. Centralized Token Validation & Refresh Handling
Instead of adding JWT validation in every controller, interceptors handle it globally.

25.Can auto-refresh expired JWTs before passing the request forward.
A: Yes using refresh token mechansim using interceptors
