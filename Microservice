Senarios and Issues with Monolythic Architechture:
		--------------------------------------------------
		1) If an issues (Any Runtime exception) occured in one module, that blocks entire application.
		2) If the application has more number modules and it requires more number of developers. It is chalenging to those many developers.
		3) If I want to address some issues fixes for one of the modules, I need to stop the server and apply the fix. But this impact other module's functionality
		============================================================
Microservices is an architectural approach to building a software application that involves breaking down a large application into a collection of small independent and loosly coupled services.
- Each service is designed to perform a specifc function and communicate with other through a well defined API's.
========================================
if we want to make server as spring cloud config server 
add spring cloud config server dependency 
add properties in app.properties  and annotate with @EnableconfigServer
never write business logic in config server, config server purpose is to store the credentials and supply credentials to down stream servers. 
-> config client


========================================
Name the main components of Microservices?.
Answer: Containers, cloud infrastructure, API gateway, Service delivery, IaC, and Service bus.
===================================================
*  service registry and service discovery 

Service Registry vs. Service Discovery in Microservices
In a microservices architecture, managing how services find and communicate with each other is crucial. This is where Service Registry and Service Discovery come into play.
1. Service Registry
The Service Registry is like a phone directory where all microservices register themselves and can be dynamically located by other services.
How it Works:
When a microservice starts, it registers its location (IP, port) in the registry.
The registry stores and maintains this information.
Other microservices query the registry to find and communicate with registered services.
Examples of Service Registry Tools:
Eureka (Netflix) â€“ Used in Spring Cloud ecosystems.
Consul (HashiCorp) â€“ Supports service discovery and health checks.
Zookeeper (Apache) â€“ Helps coordinate distributed systems.
2. Service Discovery
Service Discovery enables microservices to find and connect with other services dynamically without hardcoding IP addresses.
Types of Service Discovery:
Client-Side Discovery
The client asks the Service Registry for a service instance.
Example: Netflix Eureka in Spring Cloud.
Server-Side Discovery
A Load Balancer (like Nginx or Kubernetes Service) sits in front of services.
The balancer queries the registry and routes requests dynamically.

Example in Real Life:
Imagine an online shopping app where the Checkout Service needs to talk to the Payment Service. Instead of hardcoding the Payment Serviceâ€™s location, it queries the Service Registry, gets the latest available instance, and sends the request.
==========================================================================================
3. What Strategies Do You Use for Service Discovery?
In a dynamic microservices environment, services need to find each other without hardcoded URLs. Service discovery solves this challenge elegantly.
@EnableEurekaServer
@EnableDiscoveryClient
=========================================================================================
 How Would You Handle Distributed Transactions in Microservices?
Saga design pattern:-
The Saga design pattern is used to manage distributed transactions in microservices architecture. Instead of relying on traditional monolithic transactions, Saga breaks a complex transaction into a series of smaller, isolated operations, each handled by a different service2.
How Saga Works
A Saga is a sequence of transactions, where each step triggers the next one. If a step fails, a compensating action ensures data consistency.

Types of Saga Patterns:
-Choreography-Based Saga ðŸ•º
Microservices communicate directly with each other.
Each service performs its task and triggers the next service in the sequence.
If a failure occurs, each service executes a rollback action.
ðŸ”¹ Best for simple workflows with fewer dependencies.

-Orchestration-Based Saga ðŸŽ­
A Saga Orchestrator (a separate service) manages the transaction flow.
It tells each service what action to take and listens for responses.
If a failure occurs, the orchestrator triggers compensating actions.
ðŸ”¹ Best for complex workflows with multiple dependencies.
================================================================
11. Idempotency in ms.
Idempotency ensures that repeated execution of the same request produces the same result without unintended side effects. This is crucial in microservices, especially in scenarios where requests might be replayed, retried, or duplicated due to network failures or system errors.

Why Is Idempotency Important?
âœ… Prevents duplicate operations (e.g., multiple payments for the same order). âœ… Ensures consistency across distributed systems. âœ… Improves fault tolerance by allowing safe retries.
===================================================================
The Circuit Breaker Pattern is a design pattern used in microservices to prevent cascading failures and improve system resilience. It works like an electrical circuit breaker: it monitors calls to external services and 'trips' if a service fails repeatedly.
In a microservices architecture, services communicate with each other over the network. If one service is slow or failing, it can cause delays or even failures in other services that depend on it. The Circuit Breaker pattern helps prevent this by stopping calls to failing services, allowing them time to recover.
There are three states:

Closed: Requests flow normally. If failures exceed a threshold, it moves to Open.
Open: Requests are blocked immediately to prevent further strain on the failing service.
Half-Open: After a timeout, a few test requests are allowed. If they succeed, the circuit closes again.
In Spring Boot, we typically implement this using Resilience4j. For example, we annotate a method with @CircuitBreaker and provide a fallback method to handle failures gracefully. This helps maintain user experience even when a downstream service is down.

This pattern is especially useful in distributed systems where services depend on each other, and it helps isolate failures and recover faster
=======================================================================================================

@CircuitBreaker(name = "myService", fallbackMethod = "fallbackMethod")
public String callExternalService() {
Â Â Â  // Call to another microservice
Â Â Â  return restTemplate.getForObject("http://external-service/api", String.class);
}

public String fallbackMethod(Exception e) {
Â Â Â  return "Fallback response: Service is currently unavailable.";
}
in app.yml
resilience4j.circuitbreaker:
Â  instances:
Â Â Â  myService:
Â Â Â Â Â  registerHealthIndicator: true
Â Â Â Â Â  slidingWindowSize: 10
Â Â Â Â Â  failureRateThreshold: 50
Â Â Â Â Â  waitDurationInOpenState: 10s

=========================================================================
 How Do You Handle Data Consistency Across Microservice
"Data consistency across microservices is complex because each service typically has its own database. To handle this, we use strategies like eventual consistency, distributed transactions, and event-driven communication.

1. Eventual Consistency:
This is the most common approach. Services communicate via events (e.g., using Kafka or RabbitMQ). When one service updates data, it publishes an event, and other services react to it. This ensures consistency over time, not instantly.

2. Saga Pattern:
For long-running transactions across services, we use the Saga pattern. It breaks a transaction into smaller steps, each managed by a different service. If one step fails, compensating transactions are triggered to undo previous steps.

3. CQRS (Command Query Responsibility Segregation):
This separates read and write operations. It allows services to maintain their own data models and sync via events, improving scalability and consistency.

4. Idempotency and Retries:
To ensure reliable communication, services should be idempotent and support retries without causing duplicate data or inconsistent states.

5. Distributed Tracing and Monitoring:
Tools like Zipkin or Jaeger help track data flow and identify inconsistencies or failures in inter-service communication.

Ultimately, the choice depends on the business requirements, latency tolerance, and data criticality."

=====================================================================================
API Gateway acts as a single entry point for clients and routes requests to appropriate microservices, often handling authentication, rate limiting, and caching.
=====================================================================================
Load Balancer is an old concept which is used to distribute load or traffic across multiple instances. It can be implemented as a Hardware solution or as a Software Solution but distributing load is its main function and it can be used not just on Microservices architecture but also on Monolith and Service oriented architecture. 

On the other hand, API Gateway is a Microservice pattern which not only does load balancing but also can be used for lookup and can also simplify client code. Instead of remember 10s and 100s of Microservices, client can only remember API gateway host and port details. 

You can also implement authentication, authorization, security, and other cross-cutting concern at API Gateway level instead of implementing them on each Microservice. 
========================================================== 
to implement synchronous communication in Microservices architecture like you can use REST API calls, gRPC or GraphQL API to retrieve data from server in synchronous manner and also to upload data to server. ==
Well, like synchronous communication there are multiple ways to achieve asynchronous communication in Microservices architecture like you can use Apache Kafka, RabbitMQ, and ActiveMQ. Message brokers allows senders to send and forget and receiver then can process when they are free giving both sender and receiver freedom to work on their speed. 
========================================
20. What is CQRS Pattern in Microservices? What problem does it solve? (answer)
 CQRS is an essential design pattern for Microservice architecture.
CQRS stands for Command and Query System in which data operations are separated into two, command which writes data into database
and Query system which reads data from database or data store. By splitting your application into two component you can better optimize your 
application depending upon whether its write heavy or read heavy application. 
-==========================================================================================
2. Advantages of MS
1. Scalability - this allows to scale up or down independently based on the demand.
- 1. Horizontal Up Scaling- here we increase the no of servers.
  2. Vertical up scaling - here we increase the capacity of the existing server.

2. Agility - this allows the developers to work on indidual serviecs with its own technology.

3. Resilience - this allow the services to be fault-tolerant, which means that if one service fails, it will not affect the rest of the application.

3. Disadvantages of MS

1. Operational Overhead - it includes the cost, deployment complexity and higher resource consumption.
2. Increased Testing Complexity
3. Increased Database opration overhead.
4. Walkthrough of the Monolithic Application

5. Factors Need to be considered for converting the Monolithic to Microservices.

What are the key considerations for converting a monolithic application to a microservices architecture?

1. Databse Independent- Each MS should have its own independent DB. This will help to isolate services from each other and make them more scalable.
- Performace and Latency
- Isolation and Autonomy 
- Data Ownership and Security

2. Service Layer Prioritization- Start with the service layer and identify the dependencies between services. This information can be used to decide which service should be migrated first.

3. Entity Grouping -

1. CustomerMS - CustomerRepo
2. CallDetailsMS - CallDetailsRepo
3. PlanMS - PlanRepo
4. FriendFamilyMS - FriendFamilyRepo

7. What is Spring Cloud Consul?

1. Service Registry and Service Discovery
http://CustomerMS:8080/customer/add

2. Centalized Configuration -
3. Load Balancing

Consul is a distributed service discovery and configuration management tool developed by HashiCorp. It provides a centralized location for storing and manging configuation data, service registry that enbales service disovery and load blancing.

Step 1- Add the below dependencies-
1. Consul Discovery
2. Consul Configuration
3. 
  <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-consul-bootstrap</artifactId>
  </dependency>

8. What is Application Context and What is Bootstrap Context?
An object that represents the configuration and runtime state of a spring based application. It is the first object creted whenever the spring boot application starts.

Bootstrap Context - It is a special context that is used to bootstap the application context itself. It is creatd before the application context and is used to configure the environment that will help the Application Context to start the application.
It is typically used to load the properties from the external configuration sources such as Consul server.

Step 2-

bootstrap.yml

server:
 port: 8080

spring:
 application:
  name: CustomerMS
 cloud:
  consul:
    host: localhost   // where is the consul server located
    discovery:
      hostname: localhost  // where is your current MS is located
    config:
      fail-fast: false  // while registering the application with the consul server
      enabled: true     // this will help in discovery of this microservice by the consul
      prefix: config   //it is the name of the root folder in whcih all the config data will                          be added
      defaultContext: application
      data-key: data
      profileSperator: '::'
      format: YAML

Step 3- Start the consul server and create the key-value pairs.

consul agent -server -bootstrap-expect=1 -data-dir=consul-data2 -ui -bind=     
    

9. What is Resilience4j?

Resilience4j is a lightweight falut tolerace library for java designed to provide resilience patterns, such as circut breaker, that can be used to improve the reliablity and stablity of the Microservices based application.


Minature Ciruit Breaker-  MCB

1. Add the Resilience 4j dependecny.
2. Create a file i.e. application.yml 

reslience4j.circuitbreaker:
  instances:
    FriendFamily:
      failureRateThreshold: 50
      minimumNumberOfCalls: 10
      permittedNumberOfCallsInHalfOpenState: 3
      waitDurationInOpenState: 20s 
      automaticTransitionFromOpenToHalfOpenEnabled: true


- open state - 20s 
after 20s the ciruit will goes into half-open state - now in this half-open state will check that atleast next 3 request should get passed, if yes then the ciruit will goes into closed state, else the ciruit will goes back into open state and then again we need to wait for next 20s.

- failureRateThreshold - specifies the percentage of failed calls that will cause the CB to go into the open state.
- minimumNumberOfCalls - min no of calls that must be made before the failure rate is calculated.
- halfOpneState- the phase after 20s in the open state.
- permittedNumberOfCallsInHalfOpenState - specifies the no of calls that are allowed to be made while the circuit breaker is in the half open state.
- waitDurationInOpenState - specifies the amount of time that the CB will wait in the open state  before attempting to transition to the half-open state.

- automaticTransitionFromOpenToHalfOpenEnabled - specifies whether the CB should automatically trasition from the open-state to half-open state.

Step - 3 


@CircutBreaker(name="FriendFamily", fallBackMethod="addFriendFallBack")
@PostMapping("/addFriend")
public ResponseEntity<FreindFamily> addFriend(long custId, long friendNumber)
{

}


public ResponseEntity<FreindFamily> addFriendFallBack(long custId, long friendNumber, Throwable t)
{


}

Throwable - is passed to the fallback method so that we can log the exception that occured while trying to add the friend.

10. What is Synchronous and Asynchronous communication?

1. Synchronous- also know as request-response  communication, involves a client making a request to a server and waiting for a response before continuing.
This approaach is often used when the client requries an immediate response from ther srever to complete it's task.

Total time for Plan 5055
Total time for Friend 266
Total Overall time for Request 5332

2. Asynchronous - it involves a client sending a message or request to the server without waiting for a response. Insted, the server processes the request at a later time. This approach is often used when the client can proceed without an immediate response from the server.
Total time for Plan 0
Total time for Friend 0
Total Overall time for Request 7

line 1
line 2
line 3  - main thread

Future<Integer>  future= Future.of(()->1+2); - main thread - but the computation of the future object will be done by the sub-thread created by the main thread.

line 4
line 5

future.onComplete(result->
{
if(result.isSuccess()) SOP(result.get());
else SOP(result.getCause().getMessage());
})

Integer result=future.get();

line 6
line 7

get() - get() will block the thread until the reslut is ready, which is why it's often recommended to use the onComplete() method insted, and handel the request asynchronously.

onComplete() - The onComplete() method does not block the thread. Instead, it registers a callback that will be executed asynchronously when the Future completes. This means that the main thread can continue running while the asynchronous computation is running in the background and the callback will be executed when the reslut is available.


11. What is an API gateway?

An API gateway is a software layer that sits between your API's and the client application.
It acts as a central point of control, routing and managing requests from the client application to the appropriate backend API's.

The main purpose of API gateway is to simplify the management and operations of Multiple API's-
1. Authentication
2. Rate Limiting - controlling the number of request sent by a client in a particular time frame.
3. Caching - 
4. Logging
5. Monitoring
6. Transformation

Json -> String 

Steps - 
1. Add the API gateway dependency.
 - Consul Config
 - Consul Discover
 - Spring Cloud Starter Bootstrap

2. Create the bootstrap.yml 

server:
 port: 1500

spring:
 application:
  name: Gateway
 cloud: 
  consul:
   host: localhost

3. create the application.yml

spring:
 cloud: 
  gateway:
    discovery:
     locator:
      enabled: true
    routes:
      - id: CustomerMS
        uri: lb://CustomerMS
        predicates:
         - Path=/customer/**
        filters:
         - stripPrefixes: /gatway
      - id: PlanMS
        uri: lb://PlanMS
        predicates:
         - Path=/customer/**
        filters:
         - stripPrefixes: /gatway

http://Gateway:8080/customer/12

lb://CustomerMS:8001/customer/12


InfyGO Monolothi  -> Microservices

FlightServiceMS                             -    FlightsRepository
LoginServiceMS and RegistrationServiceMS    -    CustomerRepository
PassengerServiceMS                          -   PassengerRepository
 
TicketServiceMS                             -   TicketRepository
CreditCardMS                                -   CreditCardRepo

12. What is a declarative client?

In Spring MS, a declarative client is a way of invoking RestFUL services from within the spring application using a Java Intereface with annotations.

Advantages of using the DC- FeignClient 
1. Load Balancing - FC will automatically balances requests across multiple instances of a service. This makes it more resilient to failures and helps to improve the performace.

2. Circuit Breaker - FC will automactically fail requests to  the service if it is experiencing problems.
CB is -
Threshold: 20
Error Threshold Percentage - 50%
Sleep Window : 5000 milliseconds

3. Retry Logic : FC can automatically retry failed requests. This can hlep to improve the overall success rate of the requests, even if the service is temporarily unabailble.


Steps -

1. Add the OpenFeign dependency.
2. Create an interface and configure as shown below-


@FeignClient(name="FriendFamilyMS")
public interface FriendFamily
{

@RequestMapping("/customers/{phoneNo}")
List<Long> getFriends(@PathVariable ("phoneNo")Long phoneNo);
}

lb:FriendFamilyMS:9000/customers/23482342974

3. Need to add the @EnableFeingClients on the bootstarp or root class.


- Reduc the boilerplate code.
- Improved testablity.
- Simplified service integeration.


13. Introduction to the Prometheus and its use in the Monitoring.


Its purpose in a MS architecture is to provide centralized, scalable and flexible monitoring and alerting solution.
It can monitor various aspects of MS like -
1. System level matrics
i. CPU usage.
ii. Memeory usage
iii. Network I/O
iv. Disk I/O

2. Application level matrics
i. Response Time
ii. Request Rate
iii. Error Rate

1. Cloud Watch

Steps-
1. Add the actuator dependecny - provides us with several endpoints that expose useful information about the running application such as health status, metrics and more.

2. Add the prometheus dependecny.

3. Properties need to be added in the MS for prometheus to access the data-

management.endpoint.matrics.enabled= true   - enables the /matrics endpoint.
management.endpoint.web.exposure.include=*  - will enable all the actuator endpoints.

management.endpoint.promethus.enabled= true - will enable the /prometheus endpoint. - this will export the data in the format that prometheus can consume.


management.endpoint.metrics.export.enabled=true  - will enable automatic conversion of metrices collected by /metrics endpoint to prometheus format and make it availble via /prometheus endpoint.

4. Configure the prometheus.yml file with the refrence of the microservices. 





