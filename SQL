 Goal: Get
emp_name (Employee name) (from employee table)
manager_name (Using self join) (from employee table)
dept_name (From department table)

SELECT 
    e.emp_name AS employee_name,
    m.emp_name AS manager_name,
    d.dept_name AS department_name
FROM 
    employee e
LEFT JOIN 
    employee m ON e.manager_id = m.emp_id
LEFT JOIN 
    department d ON e.dept_id = d.dept_id;

We use LEFT JOIN to ensure that:
Even if an employee doesn't have a manager (e.g., CEO), it still shows up.
Even if a department is not assigned, the employee still appears.
================================================================
SELECT 
    e.emp_name,
    d.dept_name
FROM 
    employee e
JOIN 
    department d ON e.dept_id = d.dept_id;
==================================================
You're describing a search/autocomplete feature where:
You have a table (let‚Äôs say packet) containing plan names.
These plan names can start with different characters like A, B, C, S, etc.
When a user starts typing (e.g., "S"), it should return all plan names containing or starting with "S", such as "Silver", "CB Silver", etc.

The user should be able to type partially or select from suggestions.

‚úÖ Table: packet
Column	Description
packet_id	Unique ID of the plan
plan_name	Name of the plan (e.g., "Silver", "CB Silver", "Basic A", etc.)

‚úÖ SQL Query for Search (Case-Insensitive)

SELECT 
    plan_name 
FROM 
    packet 
WHERE 
    LOWER(plan_name) LIKE LOWER('%s%');
üî∏ If user types "S", this will return any plan that contains S or s in any position.

üîç If you want plans that start with the character:

SELECT 
    plan_name 
FROM 
    packet 
WHERE 
    LOWER(plan_name) LIKE LOWER('s%');
‚úÖ Returns: Silver, Standard, Super Plan
‚ùå Doesn't return: CB Silver, Pro Silver

üîç If you want plans that contain the search text anywhere:

SELECT 
    plan_name 
FROM 
    packet 
WHERE 
    LOWER(plan_name) LIKE LOWER('%silver%');
‚úÖ This is useful for partial matching and autocomplete suggestions.

‚úÖ Integration in Java (Spring Boot)
If you're using Spring Boot + JPA, you can define a method like:

@Repository
public interface PacketRepository extends JpaRepository<Packet, Long> {

    // Search plans containing any keyword (case-insensitive)
    List<Packet> findByPlanNameContainingIgnoreCase(String keyword);

    // Or, for plans starting with the keyword
    List<Packet> findByPlanNameStartingWithIgnoreCase(String keyword);
}
‚úÖ Frontend (Autocomplete Suggestion)
You can create an endpoint:

@RestController
@RequestMapping("/api/packets")
public class PacketController {

    @Autowired
    private PacketRepository packetRepository;

    @GetMapping("/search")
    public List<Packet> searchPlans(@RequestParam String keyword) {
        return packetRepository.findByPlanNameContainingIgnoreCase(keyword);
    }
}
üß† Example:
URL: GET /api/packets/search?keyword=s
Returns: [ "Silver", "CB Silver", "Super Plan" ]
=====================================================
Table: Employee
emp_id	 emp_name	 dept_id
1      	Alice	    101
2	       Bob     	102
3	      Charlie  	NULL
4	      David	   103

Table: Department
dept_id  	dept_name
101        	HR
102	        Finance
104         	Marketing

‚úÖ 1. INNER JOIN
Returns rows where there is a match in both tables.

SELECT e.emp_name, d.dept_name
FROM Employee e
INNER JOIN Department d ON e.dept_id = d.dept_id;
üîπ Result:
emp_name	 dept_name
Alice    	HR
Bob       	Finance

üìå Explanation:
Only Alice (101) and Bob (102) matched.
Charlie (NULL) and David (103 ‚Äì no matching dept) are excluded.

‚úÖ 2. LEFT JOIN (or LEFT OUTER JOIN)
Returns all rows from the left table (Employee), and matched rows from right table (Department). If no match, fills with NULL.

SELECT e.emp_name, d.dept_name
FROM Employee e
LEFT JOIN Department d ON e.dept_id = d.dept_id;
üîπ Result:
emp_name  	dept_name
Alice	     HR
Bob	       Finance
Charlie	   NULL
David	     NULL

üìå Explanation:
All Employees are returned.
Charlie and David don‚Äôt have matching departments ‚Üí NULL for dept_name.

‚úÖ 3. RIGHT JOIN (or RIGHT OUTER JOIN)
Returns all rows from the right table (Department), and matched rows from left table (Employee). If no match, fills with NULL.

üîπ Query:
sql
Copy
Edit
SELECT e.emp_name, d.dept_name
FROM Employee e
RIGHT JOIN Department d ON e.dept_id = d.dept_id;
üîπ Result:
emp_name	dept_name
Alice	HR
Bob	Finance
NULL	Marketing

üìå Explanation:

All Departments are returned.

No employee is in Marketing (104) ‚Üí emp_name is NULL.

‚úÖ 4. FULL OUTER JOIN (if supported)
Returns all rows when there is a match in either table. If no match, fills with NULL.

üîπ Query (not supported in MySQL directly):
sql
Copy
Edit
SELECT e.emp_name, d.dept_name
FROM Employee e
FULL OUTER JOIN Department d ON e.dept_id = d.dept_id;
üîπ Result:
emp_name	dept_name
Alice	HR
Bob	Finance
Charlie	NULL
David	NULL
NULL	Marketing

üìå Explanation:

Includes all Employees and all Departments.

Missing matches filled with NULL.

‚úÖ 5. CROSS JOIN
Returns all possible combinations (Cartesian Product).

üîπ Query:
sql
Copy
Edit
SELECT e.emp_name, d.dept_name
FROM Employee e
CROSS JOIN Department d;
üîπ Result:
emp_name	dept_name
Alice	HR
Alice	Finance
Alice	Marketing
Bob	HR
Bob	Finance
Bob	Marketing
Charlie	HR
Charlie	Finance
Charlie	Marketing
David	HR
David	Finance
David	Marketing

üìå Explanation:
Every employee paired with every department.

‚úÖ Visual Summary Table
Join Type	Rows Returned
INNER JOIN (default)	Matching rows from both tables
LEFT JOIN	All rows from left + matches on right
RIGHT JOIN	All rows from right + matches on left
FULL OUTER JOIN	All rows from both tables
CROSS JOIN	All combinations (Cartesian product)

===============================================================================
DDL- 
->CREATE TABLE Student (
    StudentId INTEGER,
    FName VARCHAR2(10), 
    Gender CHAR(1), 
    DOJ DATE);

 ->DROP TABLE Student;

constraints :
NOT NULL
PRIMARY KEY
CHECK
UNIQUE
FOREIGN KEY
We can also specify DEFAULT value for a column. Oracle database does not consider DEFAULT as a constraint.

->Not Null 
CREATE TABLE Student (
    StudentId INTEGER CONSTRAINT Stud_SId_nn NOT NULL,
    FName VARCHAR2(10) NOT NULL,
    LName VARCHAR2(10));
-> default
A column can be given the default value by using DEFAULT option. The data type of column and default expression must be the same. DEFAULT option can be provided for nullable as well as NOT NULL attributes. 
CREATE TABLE Student (
    StudentId INTEGER, 
    FName VARCHAR2(10), 
    DOJ DATE DEFAULT SYSDATE);

->PrimaryKey Constraint
PRIMARY KEY constraint on a column ensures that the column cannot contain NULL and duplicate values. We can have only one PRIMARY KEY in a table.
CREATE TABLE Student ( 
    StudentId INTEGER CONSTRAINT stud_sid_pk PRIMARY KEY,
    FName VARCHAR2(10), 
    ContactNo NUMBER(10));

->FOREIGN KEY
CREATE TABLE Marks(
    CourseId INTEGER, 
    StudentId INTEGER CONSTRAINT marks_sid_fk REFERENCES Student(StudentId), 
    MarksScored DECIMAL(5,2));

->CREATE TABLE Marks ( 
    CourseId INTEGER CONSTRAINT marks_cid_pk PRIMARY KEY, 
    StudentId INTEGER CONSTRAINT marks_sid_fk REFERENCES Student(StudentId), 
    MarksScored DECIMAL(5,2));

composite primary key
->CREATE TABLE Marks( 
    CourseId INTEGER, 
    StudentId INTEGER CONSTRAINT marks_sid_fk REFERENCES Student(StudentId), 
    MarksScored DECIMAL(5,2), 
    CONSTRAINT marks_cid_pk PRIMARY KEY(CourseId, StudentId));


-> Check Constraint
CREATE TABLE Student ( 
    StudentId INTEGER, 
    FName VARCHAR2(10), 
    Gender CHAR(1) CONSTRAINT Stud_gender_ck1 CHECK(Gender IN('M', 'F'))); 

->Unique 
UNIQUE constraint on a column ensures that two rows in a table cannnot have same value in that column. Unlike Primary Key, UNIQUE constraint allows NULL values. A table can have many UNIQUE constraints.
CREATE TABLE Student ( 
    StudentId INTEGER, 
    FName VARCHAR2(10), 
    ContactNo NUMBER(10) CONSTRAINT Stud_cno_uk UNIQUE);

->CREATE TABLE Student (
2     StudentId INTEGER PRIMARY KEY,
3     FName VARCHAR2(10) CONSTRAINT Stud_FName_NN NOT NULL,
4     LName VARCHAR2(10), CHECK (FName <> LName),
5     DOJ DATE DEFAULT SYSDATE,
6     Gender CHAR(1) CONSTRAINT Student_Gender_Ck CHECK (Gender IN('M', 'F')),
7     PersonId INTEGER REFERENCES Person(PersonId));

=================================================================================
exercise 

Column Name	     Data Type	           Constraint         	   Description
MId	               INTEGER         	PRIMARY KEY	              Unique Match ID for a tournament
TId                  	INTEGER	      primary key, FOREIGN KEY      ‚Üí Tournament table	Refers to an existing Tournament ID
Player1	             INTEGER             	FOREIGN KEY          ‚Üí Player table, ‚â† Player2	Refers to existing Player ID (Player 1)
Player2	             INTEGER	            FOREIGN KEY            ‚Üí Player table	Refers to existing Player ID (Player 2)
MatchDt	              DATE	              NOT NULL	           Scheduled date of the match
Winner              	INTEGER	          FOREIGN KEY          ‚Üí Player table	Refers to the winning Player's ID
Score              	VARCHAR2(30)	        NOT NULL         	Match score in text format (e.g., "6-4, 3-6, 7-5")

CREATE TABLE Match (
    MId INTEGER ,
    TId INTEGER,
    Player1 INTEGER,
    Player2 INTEGER,
    MatchDt DATE NOT NULL,
    Winner INTEGER,
    Score VARCHAR2(30) NOT NULL,

    
    CONSTRAINT pk_match PRIMARY KEY (MId, TId),
    CONSTRAINT fk_match_tournament FOREIGN KEY (TId) REFERENCES Tournament(TId),
    CONSTRAINT fk_match_player1 FOREIGN KEY (Player1) REFERENCES Player(PId),
    CONSTRAINT fk_match_player2 FOREIGN KEY (Player2) REFERENCES Player(PId),
    CONSTRAINT fk_match_winner FOREIGN KEY (Winner) REFERENCES Player(PId),
    CONSTRAINT chk_match_players CHECK (Player1 <> Player2)
);
========================================================================================

ALTER TABLE Student DROP (DOB);
ALTER TABLE Student DROP (GNDR, MobNo);
ALTER TABLE Student ADD Address VARCHAR2 (20);
ALTER TABLE Student ADD (Course VARCHAR2 (20), Marks NUMBER (10));
ALTER TABLE Student MODIFY Name VARCHAR2(50);
ALTER TABLE Student MODIFY DOJ DEFAULT SYSDATE;
ALTER TABLE Student RENAME COLUMN Id TO SID;
