Here's a breakdown of the interview questions from the video, categorized by round:
Round 1: [00:41]
 * Coding Questions (using Streams):
   * Get a list of employee names who earn above the average salary [00:48]
   * Create a map with employee ID as key and name as value [01:09]
   * Get the highest salary by department [01:24]
   * Count the occurrences of each character in a string (pure Java, no streams) [01:41]
 * Theoretical Questions:
   * Explanation of the usage and return types of various stream operations (e.g., collect, filter) [01:56]
   * Difference between synchronized and concurrent hashmap [02:24]
   * Fail-fast vs. fail-safe iterators [02:31]
   * Fork-join pool in thread pools [02:31]
   * Thread pool used by parallel streams [02:38]
   * In-depth questions about HashMap (internal working, hashcode calculation, value overriding, collision, time complexity) [02:43]
   * Design patterns (Singleton, Prototype, Abstract Factory, Factory, Builder) [03:04]
   * SQL: JPA, custom queries, native queries, procedures, triggers, functions, GROUP BY, HAVING, LIKE [03:24]
   * Abstract classes [03:45]
   * SOLID principles with examples [03:45]
   * JUnit: Mocking static methods, private methods, disadvantages of PowerMockito, usage of Mockito, verify, times, never invoked, any time invoked with any parameter, return, assertions [04:06]
Round 2: [04:40]
 * Coding Question:
   * Given a list of transactions (each with a list of items), count the items with an amount less than 50 (focus on using flatMap and count) [04:52]
 * Theoretical Questions:
   * When to use flatMap, map, and filter [05:41]
   * How to implement the coding question logic without streams (pure Java) [05:53]
   * SOLID principles with real-time examples [06:00]
   * Encapsulation and its purpose [06:07]
   * Other OOP concepts [06:20]
   * Inbuilt functional interfaces (Predicate, Supplier, Consumer) [06:25]
   * Creating and using custom functional interfaces (e.g., custom Predicate) [06:34]
   * SQL:
     * Find the second-highest salary from an employee table [06:48]
     * Given two tables (customer and order), find customers who have made zero orders [06:54]
   * Spring Boot:
     * Filters and interceptors (purpose, return type, custom creation, differences) [07:24]
     * Spring Boot project flow [07:44]
   * Java 8 Date/Time API (changes, immutability, calculating date differences) [07:52]
   * CompletableFuture (what it is, how to use it instead of threads) [08:06]
   * Try-with-resources (what it is, alternatives, how it works) 
Spring:
     * Dependency injection (types, why constructor injection is preferred) [08:25]
   * Spring Boot:
     * Eureka server (what it is, how to register services, load balancer operation) [08:40]
     * API Gateway (routing, programmatic vs. YML configuration, properties, predicates) [08:54]
   * Microservices:
     * Design patterns (CQRS, Saga, Orchestrator vs. Choreography) [09:29]
     * Microservices design principles [09:50]
   * Sealed classes and records [09:57]
   * Design patterns (again, with examples and implementation details) [10:05]
   * Kafka:
     * How to send events to Kafka (KafkaTemplate, KafkaListener, KafkaConsumer) [10:22]
     * Kafka configuration and basic communication [10:37]
   * RestTemplate vs. WebClient (differences, Mono, Flux, blocking vs. non-blocking requests) [11:03]
   * Agile ceremonies [11:37]
   * Scenario-based questions (handling junior developers, sprint planning disagreements, handling major changes near the end of a sprint, managing a large team) [11:51]
Round 3: [13:14]
 * TreeMap internal working [13:20]
 * TreeSet and HashSet internal working [13:28]
 * Coding Question:
   * Calculate the number of days between two dates (dd/mm/yyyy format) without using any internal date/time libraries (pure Java 7) [13:34]
 * Serialization and Deserialization in Java [14:46]
   * Problems with serialization/deserialization [14:46]
   * JEP 290 (serialization/deserialization filter) [14:56]
   * Forgery attacks in serialization and how to avoid them [15:06]
 * Microservices Design Patterns [15:19]
   * CQRS [15:19]
   * Sidecar [15:26]
 * Logging in Microservices [15:26]
   * Logging frameworks used [15:26]
   * Trace ID and Span ID (what they are, how to use them for navigation across microservices) [15:34]
   * Which is constant across services (Trace ID or Span ID) [15:47]
 * Microservices Deployment Strategies [15:52]
   * Blue-green deployment [15:59]
 * Spring Boot Application Flow [16:04]
   * Request flow from hit to response (DispatcherServlet, filters, interceptors, controllers, services, repositories) [16:04]
   * Interceptor methods (preHandle, postHandle, afterCompletion) [16:11]
   * Filter chain [16:18]
 * Authentication and Authorization [16:25]
   * Basic Auth, OAuth, JWT [16:25]
   * JWT format (header, payload, signature) [16:33]
   * Claims in JWT payload (audience, primary audience, secondary audience, scope) [16:39]
   * How to use JWT and OAuth in microservices [16:46]
 * Spring Annotations [16:52]
   * @Autowired, @Resource, @Inject, @Component [16:52]
   * Downsides of @Autowired and @Resource [16:58]
   * When to use each annotation [16:58]
   * Difference between @Inject, @Autowired, and @Resource [17:05]
   * Scenario-based question: If an interface has three implementations, what happens if you autowire a list of that interface? [17:12]
 * Java Memory Management

