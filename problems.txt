public class ReverseOfString {

	 public static void main(String[] args) {
		String s="reverseOfString";
		String r="";
		for(int i=0;i<s.length();i++) {
			r=s.charAt(i)+r;
		}
		System.out.println(r);
	}
}
---------------------------------------

public class Pyramid {

	 public static void main(String[] args) {
		
		 
		 int n=5;
		 for(int i=0;i<n;i++) {
			 for(int j=0;j<n-i;j++) {
				 System.out.print(" ");
			 }
			 for(int k=0;k<2*i+1;k++) {
				 System.out.print("*");
			 }
			 System.out.println();
		 }
	 }

}
------------------------------------------

 String a=" remove white spaces from string  ";
		 System.out.println(a.replaceAll(" ", ""));
---------------------------------------------------------

public class CharacterCount {

	public static void main(String[] args) {

		String s = "Better Butter";
		HashMap<Character, Integer> charCountMap = new HashMap<Character, Integer>();

		char[] strArray = s.toCharArray();

		for (char c : strArray) {
			if (charCountMap.containsKey(c)) {

				charCountMap.put(c, charCountMap.get(c) + 1);
			} else {
				charCountMap.put(c, 1);
			}
		}
		
		for(Entry<Character, Integer> e:charCountMap.entrySet()) {
			System.out.println(e.getKey()+" "+e.getValue());
		}
	}

}
------------------------------------
public class equqlityOfArray {

main()
	if(equalityOfTwoArrays()) {
			System.out.println("both are same");
		}else {
			System.out.println("not same");
		}
	}

	public static Boolean equalityOfTwoArrays() {
		int a[]= {1,2,3,4,5};
		int b[]= {1,1,2,3,4,5};
		if(a.length== b.length) {
		for(int i=0;i<a.length;i++) {
			if(a[i]!=b[i]) {
				return false;
			}
		}
			
		}else {
			return false;
		}
	return true;
	}

----------------------------------------


public class Anagram {

	public static void main(String[] args) {
		String s="m o t her in law";
		String s2="hi t ler woman";
		
		String cs=s.replaceAll(" ", "");
		String cs2=s2.replaceAll(" ", "");
		if(cs.length()!=cs2.length()) {
			System.out.println(false);
		}else {
		char [] c1=s.toLowerCase().toCharArray();
		char []c2=s.toLowerCase().toCharArray();
		
		Arrays.sort(c1);
		Arrays.sort(c2);
		System.out.println(Arrays.equals(c1, c2));
	}
	}
}
===============================================================
Armstrong number

int n=153;
	int s=0,r=0;
	while(n>0) {
		s=n%10;
		r=(s*s*s)+r;
		n=n/10;
	}
	System.out.println(r);
	}
===========================================
public class Tester {

	public static void main(String[] args) {
	//duplicate elements in an array	
	int a[]= {1,2,3,4,5,6,2,1,3};
	int hash[]=new int [a.length];
	for(int i=0;i<a.length;i++) {
		hash[a[i]]++;
		
	}
	
	for(int i=0;i<hash.length;i++) {
		if(hash[i]>1) {
			System.out.println(hash[i]+" "+i);
		}
	}
	
	}
==========================================

//second largest number in array	 
	int a[]= {1,2,3,4,5,6,2,1,3};
	int sl=Integer.MIN_VALUE;
	int l=Integer.MIN_VALUE;
	
	for(int i=0;i<a.length;i++) {
		if(a[i]>l) {
			sl=l;
			l=a[i];
		}else if(a[i]>sl && a[i]!=l) {
			sl=a[i];
		}
	}
	System.out.println(sl);
	}
=========================================
//find all pairs of elements in an array whose sum is equal to given number
		int a[]= {4,5,7,11,9,13,8,12};
		int s=20;
		for(int i=0;i<a.length;i++) {
			for(int j=i+1;j<a.length;j++) {
				if(a[i]+a[j]==s) {
					System.out.println(a[i]+" "+a[j]);
				}
			}
		}
======================================================

char c = Integer.toString(digit).charAt(0);
 
        //Decrementing number & checking whether it contains digit
 
        for (int i = number; i > 0; --i)
        {
            if(Integer.toString(i).indexOf(c) == -1)
            {
                //If 'i' doesn't contain 'c'
 
                return i;
            }
        }
 
        return -1;
==========================================
int num=149;
		String numbs;
		int dig=4;
		String s= Integer.toString(dig);
		for(int i = num ;i>=0;i--)
		{
		numbs=i+"";
		if(!numbs.contains(s))
		{
		System.out.println(i);
		break;
	}
		}
===================================


		//How to check whether given number is binary or not
		
		int n=12100;
		int s=0;
		while(n!=0) {
			s=n%10;
			
			if(s>1) {
				System.out.println("not binary");
				break;
			}else {
				n=n/10;
			}

=================================

	//Java program to check whether one string is rotation of another string.
		String a = "ebced";
		String b = "cedab";
		String c = a + a;
		if(a.length()!=b.length()) {
			System.out.println("not a rotation");
		}else {
		if (c.contains(b)) {
			System.out.println("yes rotation");
		} else {
			System.out.println("not rotation");
		}
===============================================

//common elements in an array
int a[]= {1,2,3,4,5,6};
		int b[]= {1,2,3,7,8,9,4};
		List<Integer> set=new LinkedList<Integer>();
		for(int i=0;i<a.length;i++) {
			for(int j=0;j<b.length;j++) {
			if(a[i]==b[j]) {	
				set.add(a[i]);
			}
			}
		}
		System.out.println(set);
}
=================================================
//check whether user input is number or not in Java
	String s="12";
	try {
		Integer.parseInt(s);
	}catch(NumberFormatException e) {
		e.printStackTrace();
	}
		
==============================================
	//to reverse each word of a string in Java
	String s="java concept of the day";
	String sp[]=s.split(" ");
	String w="";
	for(int i=0;i<sp.length;i++) {
		String rw=sp[i];
		String reverse="";
		for(int j=0;j<rw.length();j++) {
			reverse=rw.charAt(j)+reverse;
		}
		w=w+reverse+" ";
	}
	System.out.println(w);
	}
==================================================
//find trigonometric values of an angle in Java?
	double   angle=90;
	//coverting angle to radians
	double angleinradians=Math.toRadians(angle);
	
	double sin=Math.sin(angleinradians);
	System.out.println(sin);
	double sec=(1/sin);
	System.out.println(sec);
	}
======================================================
//moving zeros to back
	int a[]= {14,0,5,2,0,3,0};
	int j=0;
	for(int i=0;i<a.length;i++) {
		if(a[i]!=0) {
			a[j]=a[i];
			j++;
		}
	}
	while(j<a.length) {
		a[j]=0;
		j++;
	}
	System.out.println(Arrays.toString(a));
	
	//moving zeros to front
	int ar[]= {14,0,5,2,0,3,0};
	int k=ar.length-1;
	for(int i=ar.length-1;i>=0;i--) {
		if(ar[i]!=0) {
			ar[k]=ar[i];
			k--;
		}
	}
	
	while(k>=0) {
		ar[k]=0;
		k--;
	}
	System.out.println(Arrays.toString(ar));
	
	}
=============================================================
//		percentage of uppercase, lowercase, digits and special characters in a string

		String a = "ABCabcd1234@*&#";
		char c[] = a.toCharArray();
		int u = 0, l = 0, d = 0, s = 0;
		int len = a.length();
		for (int i = 0; i < a.length(); i++) {
			if (Character.isUpperCase(c[i])) {
				u++;
			} else if (Character.isLowerCase(c[i])) {
				l++;

			} else if (Character.isDigit(c[i])) {
				d++;
			} else {
				s++;
			}
		}
		System.out.println(u + " " + l + " " + d + " " + s);

		System.out.println("upper case percentage" + (u * 100.0) / len);
		System.out.println("lower case percentage" + (l * 100.0) / len);
		System.out.println("digit percentage" + (d * 100.0) / len);
		System.out.println("special char percentage" + (s * 100.0) / len);
===================================================================================

//		Find missing number in an array

		int arr[] = { 1, 2, 3, 4, 6 };
		int sum = 0, t = 0;
		for (int i = 0; i < arr.length; i++) {
			sum += arr[i];
		}

		for (int i = 1; i <= arr.length + 1; i++) {
			t += i;

		}

		int m = t - sum;
		System.out.println(m);
===========================================================

	String a = "abcdeffk";
		String c = "";

		c += a.toUpperCase().charAt(0);
		c += a.substring(1, a.length() - 2);
		c += a.toUpperCase().charAt(a.length() - 1);
		System.out.println(c);

		StringBuilder sb = new StringBuilder();
		sb.append(a.toUpperCase().charAt(0));
		sb.append(a.substring(1, a.length() - 2));
		sb.append(a.toUpperCase().charAt(a.length() - 1));
		System.out.println(sb);
================================================================


//remove duplicate from the string 
		String s="hello world";
		Set<Character> set=new HashSet<Character>();
		
		StringBuilder sb=new StringBuilder();
		for(char c:s.toCharArray()) {
			if(set.add(c))
		sb.append(c);	
		}
		System.out.println(sb);

===============================================

* * *
* * *
* * *

for (int i = 0; i < N; i++)
    {
       for (int j = 0; j < N; j++)
        {
            System.out.print("* ");
        }
 System.out.println();
    }

=========================

* 
* * 
* * *



for (int i = 0; i <= N; i++)
    {
       for (int j = 0; j <= i; j++)
        {
            System.out.print("* ");
        }
 System.out.println();
    }
==============================

1
1 2 
1 2 3

for (int i = 0; i < N; i++)
    {
       for (int j = 0; j <= i; j++)
        {
            System.out.print(j);
        }
 System.out.println();
    }

============================================

1
2 2 
3 3 3

for (int i = 0; i < N; i++)
    {
       for (int j = 0; j <= i; j++)
        {
            System.out.print(i);
        }
 System.out.println();
    }
=========================

* * *
* *
*

for (int i = 0; i < N; i++)
	    {
	       for (int j = 0; j <N- i; j++)
	        {
	            System.out.print("*");
	        }
	 System.out.println();
	    }

===================================================

12345
1234
123
12
1

for (int i = 1; i < N; i++)
	    {
	       for (int j = 0; j <N- i; j++)
	        {
	            System.out.print(j);
	        }
	 System.out.println();
	    }
==========================================
     *     
    ***    
   *****   
  *******  
 *********

int  N=5;
		for (int i = 0; i < N; i++)
	    {
			for (int j =0; j<N-i-1; j++)
	        {
	            System.out.print(" ");
	        }
	     
			for(int j=0;j< 2*i+1;j++){
	            System.out.print("*");
	        }
	        
	        // For printing the spaces after the stars in each row
	         for (int j =0; j<N-i-1; j++)
	        {
	            System.out.print(" ");
	        }
	       
	         System.out.println();
	    }
==============================================

*****  
 ***
  *   

	int  N=5;
		for (int i = 0; i < N; i++)
	    {
	        // For printing the spaces before stars in each row
	        for (int j =0; j<i; j++)
	        {
	            System.out.print(" ");
	        }
	       
	        // For printing the stars in each row
	        for(int j=0;j< 2*N -(2*i +1);j++){
	            
	            System.out.print("*");
	        }
	        
	        // For printing the spaces after the stars in each row
	        for (int j =0; j<i; j++)
	        {
	            System.out.print(" ");
	        }
	       
	         System.out.println();
	    }
===============================================

  *  
  **
  ***  
  **
  * 

int N = 3;
		for (int i = 1; i <= 2 * N - 1; i++) {

			// stars would be equal to the row no. uptill first half
			int stars = i;

			// for the second half of the rotated triangle.
			if (i > N)
				stars = 2 * N - i;

			// for printing the stars in each row.
			for (int j = 1; j <= stars; j++) {
				System.out.print("*");
			}
			System.out.println();
		}

==============================================================

		int a[]= {1,2,3,9,4,5,6};
		//find max element in array
		
		int max=0;
		for(int i=0;i<a.length;i++) {
			if(a[i]>max) {
				max=a[i];
			}
		}
		System.out.println(max);
		//or
		Arrays.sort(a);
		System.out.println(a[a.length-1]);
==========================================================

// remove duplicates in sorted array

		int a[] = { 1, 1, 2, 2, 4, 4, 5, 6, 7, 8, 8, 9 };

		Set<Integer> set = new HashSet<Integer>();
		for (int i = 0; i < a.length; i++) {
			set.add(a[i]);
		}
		System.out.println(set);

		int c = 0;
		for (int ab : set) {
			a[c++] = ab;

		}

		for (int i = 0; i < c; i++) {
			System.out.println(a[i]);
		}
		// or
		int i = 0;
		for (int j = 1; j < a.length; j++) {
			if (a[i] != a[j]) {
				i++;
				a[i] = a[j];
			}
		}

		for (int k = 0; k < i + 1; k++) {
			System.out.println(a[k]);
		}
	}

======================================================

//left rotate array by one place 
		int a[]= {1,2,3,4,5,6};
		// output - 2,3,4,5,6,1
		int temp=a[0];
		for(int i=1;i<a.length;i++) {
			a[i-1]=a[i];
		}
		a[a.length-1]=temp;
		System.out.println(Arrays.toString(a));
	
===============================================================

//move zeros to the end
	
	int a[]= {1,0,2,3,0,0,4,0,5,0,9};
	
	List<Integer> list=new ArrayList<Integer>();
	for(int i=0;i<a.length;i++) {
		if(a[i]!=0) {
			list.add(a[i]);
		}
	}
	
	for(int i=0;i<list.size();i++) {
		a[i]=list.get(i);
	}
	
	for(int i=list.size();i<a.length;i++) {
		a[i]=0;
	}
	
	System.out.println(Arrays.toString(a));
	
=================================================================

1
01
101
0101
10101


int n=5;
	int start=1;
	for(int i=0;i<n;i++) {
		
		if(i%2==0) {
			start=1;
		}else {
			start=0;
		}
		
		for(int j=0;j<=i;j++) {
			System.out.print(start);
			start=1-start;
		}
		System.out.println();
	}
 ================================================================

1    1
12  21
123321

int n=3;
		int space =2*(n-1);
		for(int i=0;i<n;i++) {
			for(int j=0;j<=i;j++) {
				System.out.print(j);
			}
			for(int j=0;j<space;j++) {
				System.out.print(" ");
			}
			for(int j=i;j>=0;j--) {
				System.out.print(j);
			}
			System.out.println();
			space-=2;

===============================================================

//		1
//		2 3
//		4 5 6
		int n=3;
		int c=1;
		for(int i=0;i<n;i++) {
			for(int j=0;j<=i;j++) {
				System.out.print(c++ +" ");
			}
			System.out.println();
		}
		
======================================================

//		A
//		A B
//		A B C
		
		int n=3;
		
		for(int i=0;i<n;i++) {
			for( char c='A'; c<=i+'A'; c++) {
				System.out.print(c+" ");
			}
			System.out.println();
		}

============================================================


/		A
//		B B
//		C C C
		
		int n=3;
		for(int i=0;i<n;i++) {
			for(int j=0;j<=i;j++) {
				System.out.print((char)((int)('A'+i)));
			}
			System.out.println();
		}

===========================================================
Input Format:  k = 10, array[] = {2,3,5,1,9}
Result: 3
Explanation: The longest subarray with sum 10 is {2, 3, 5}. And its length is 3.

	int arr[]= {2,3,5,1,9};
		int  k=10;
	int len=0;
		for(int i=0;i<arr.length;i++) {
			long s=0;
			for(int j=i;j<arr.length;j++) {
				s+=arr[j];
				if(s==k) {
					len= Math.max(len, j-i+1);
				}
			}
		}
		System.out.println(len);
	}


=======================================================================
printing those elements

	int arr[]= {2,3,5};
		int  k=5;
	int len=0;
	int start = -1, end = -1;
		for(int i=0;i<arr.length;i++) {
			long s=0;
			for(int j=i;j<arr.length;j++) {
				s+=arr[j];
				if(s==k) {
					 if (j - i + 1 > len) {
			                len = j - i + 1;
			                start = i;
			                end = j;
			            }
				}
			}
		}
		 for (int i = start; i <= end; i++) {
		        System.out.print(arr[i] + " ");
		    }
	}

=========================================================================
//count number of zeros and ones and twoss

int arr[]= {1,0,2,0,1,2,0,1,2,2,1,0,1};
	
	int c0=0, c1=0, c2=0;
	for(int i=0;i<arr.length;i++) {
		if(arr[i]==0) {
			c0++;
		}else if(arr[i]==1) {
			c1++;
		}else if(arr[i] ==2) {
			c2++;
		}
	}
	
	for(int i=0;i<c0;i++) {
		arr[i]=0;
	}
	for(int i=c0;i<c0+c1;i++) {
		arr[i]=1;
	}
	for(int i=c0+c1;i<arr.length;i++) {
		arr[i]=2;
	}
	System.out.println(Arrays.toString(arr));
	}
===============================================================================

String s="levdel";
	
	int start=0, end=s.length()-1;
	
	while(start<=end) {
		if(s.charAt(start)!= s.charAt(end)) {
			System.out.println( false);
			
		}
		start++;
		end--;
	}
	System.out.println(true);
===========================================================
Write a Java program to find the length of the longest substring without repeating characters
String s="abcedabcbb";
	int j=0, len=0;
	Map<Character, Integer> map= new HashMap<Character, Integer>();
	for(int i=0;i<s.length();i++) {
		char c= s.charAt(i);
		if(map.containsKey(c)) {
			 j= Math.max(j, map.get(c)+1);
		}
			map.put(c, i);
		
		len = Math.max(len, i-j+1);
	}
	System.out.println(len);
===================================================================

 //Java program to merge two sorted arrays into a single sorted array
     int[] arrayA = new int[] {1, 2,9,22,55, 3, 4, 5};
      
     int[] arrayB = new int[] {6,4 ,1,7, 8, 9, 10};
      

	 int[] mergedArray = new int[arrayA.length + arrayB.length];
     
     int i=0, j=0, k=0;
      
     while (i < arrayA.length && j < arrayB.length)
     {
         if (arrayA[i] < arrayB[j]) 
         {
             mergedArray[k] = arrayA[i];
             i++;
             k++;
         } 
         else
         {
             mergedArray[k] = arrayB[j];
             j++;
             k++;
         }
     } 
              
     while (i < arrayA.length) 
     {
         mergedArray[k] = arrayA[i];
         i++;
         k++;
     } 
              
     while (j < arrayB.length) 
     {
         mergedArray[k] = arrayB[j];
         j++;
         k++;
     } 
     
     System.out.println(Arrays.toString(mergedArray));
 =========================================================================

public static int Check(int arr[],int n, int num, int diff) {
	int c=0; 
	for(int i=0;i<n;i++) {
		int s=0;
		s=Math.abs( arr[i]-num);
		if(s<=diff) {
			c++;
		}
	}
	
	return c>0 ? c :-1; 
		
	}
	
	public static void main(String[] args) {
		int arr[]= {12,3,14,56,77,13};
		int num=13, diff=2;
	System.out.println(Check(arr,arr.length,num,diff));
		
	}
=====================================================

public static int SmallLargesum(int arr[], int n) {
		if (arr == null || arr.length <= 3) {
			return 0;
		}

		int[] evenElements = new int[(arr.length ) / 2];
		int[] oddElements = new int[arr.length / 2];
		int evenIndex = 0, oddIndex = 0;

		for (int i = 0; i < arr.length; i++) {
			if (i % 2 == 0) {
				evenElements[evenIndex++] = arr[i];
			} else {
				oddElements[oddIndex++] = arr[i];
			}
		}

		Arrays.sort(evenElements);
		Arrays.sort(oddElements);

		int secondLargestEven =  evenElements[evenElements.length - 2] ;
		int secondLargestOdd = oddElements[oddElements.length - 2] ;
		return secondLargestEven + secondLargestOdd;
	}

	public static void main(String[] args) {
		int arr[] = { 3, 2, 1, 7, 5, 4};

		System.out.println(SmallLargesum(arr, arr.length));

	}

=======================================================
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Scanner;

public class CustomerInserter {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String USER = "your_username";
    private static final String PASS = "your_password";

    public static void main(String[] args) {
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement pstmt = conn.prepareStatement("INSERT INTO customers (id, name, email) VALUES (?, ?, ?)");
             Scanner scanner = new Scanner(System.in)) {

            while (true) {
                System.out.print("Enter customer ID (negative to exit): ");
                int id = scanner.nextInt();
                if (id < 0) {
                    System.out.println("Exiting...");
                    break;
                }

                System.out.print("Enter customer name: ");
                String name = scanner.next();

                System.out.print("Enter customer email: ");
                String email = scanner.next();

                pstmt.setInt(1, id);
                pstmt.setString(2, name);
                pstmt.setString(3, email);
                pstmt.executeUpdate();

                System.out.println("Customer inserted successfully.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            System.err.println(e.getMessage());
        }
    }
}


